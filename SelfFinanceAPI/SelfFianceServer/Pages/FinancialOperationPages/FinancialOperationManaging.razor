@page "/finoperationsmanaging"
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Net.Http.Json
@using System.Text
@using SelfFinanceCommon.Dtos;
@using SelfFinanceCommon.Dtos.ForCreate;
@using SelfFianceServer.Services.Interfaces;
@inject ISnackbar Snackbar
@inject IFinancialOperationService FinancialOperationDtoService
@inject ICommonService CommonService
@inject IExpenseTypeService ExpensetypeDtoService

<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" @onclick="RefreshFinancialoperationsList" Color="Color.Inherit" Class="mr-5" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Href="/finoperationcreating" Color="Color.Inherit" />
        <MudIconButton Icon="@Icons.Material.Outlined.Edit" @onclick="UpdateRecord" />
        <MudIconButton Icon="@Icons.Material.Outlined.Remove" @onclick="DeleteRecord" />
    </MudToolBar>
</MudPaper>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="8">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudTable T="FinancialOperationDto" Items="@_financialOperations" Hover="true" Filter="new Func<FinancialOperationDto,bool>(FilterFunc1)"
                @bind-SelectedItem="_selectedItem" OnRowClick="@OnRowClickHandler">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">FinancialOperations</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<FinancialOperationDto,object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<FinancialOperationDto, object>(x=>x.TypeId)">Type</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<FinancialOperationDto, object>(x=>x.Amount)">Amount</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<FinancialOperationDto, object>(x=>x.DateTime)">Date and time</MudTableSortLabel></MudTh>
                        <MudTh>Description</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Type">@_expenseTypes.FirstOrDefault(x => x.Id == context.TypeId)?.Name</MudTd>
                        <MudTd DataLabel="Amount">@context.Amount</MudTd>
                        <MudTd DataLabel="Date and time">@context.DateTime</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudForm>
                    <MudNumericField T="int" Label="Id" ReadOnly="true" @bind-Value="_itemToUpdate.Id" />
                    <MudSelect T="ExpenseTypeDto" Label="Expense type" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-SelectedValues="_selectedExpenseType">
                        @foreach (var expType in _expenseTypes)
                        {
                            <MudSelectItem Value="expType" />
                        }
                    </MudSelect>
                    <MudNumericField T = "decimal" Label = "Amount" @bind-Value="_itemToUpdate.Amount"/>
                    <MudDatePicker Label = "Date" @bind-Date="_itemToUpdate.DateTime"/>
                    <MudTimePicker Label="Time" @bind-Time="_timeOfFinOperation"/>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private string searchString = "";
    private FinancialOperationDto selectedItem1 = null;
    private HashSet<FinancialOperationDto> _selectedItems = new HashSet<FinancialOperationDto>();
    private FinancialOperationDto _selectedItem = new();
    private FinancialOperationDto _itemToUpdate = new();
    private TimeSpan? _timeOfFinOperation;

    private IEnumerable<FinancialOperationDto> _financialOperations = new List<FinancialOperationDto>();
    private IEnumerable<ExpenseTypeDto> _expenseTypes = new List<ExpenseTypeDto>();
    private IEnumerable<ExpenseTypeDto> _selectedExpenseType = new List<ExpenseTypeDto>();

    private void UpdateEditedData()
    {
        _itemToUpdate.Id = _selectedItem.Id;
        _itemToUpdate.TypeId = _selectedItem.TypeId;
        _itemToUpdate.Amount = _selectedItem.Amount;
        _itemToUpdate.DateTime = _selectedItem.DateTime;
        _itemToUpdate.Description = _selectedItem.Description;
        _selectedExpenseType = _expenseTypes.Where(x => x.Id == _selectedItem.TypeId);
        _timeOfFinOperation = _selectedItem.DateTime.Value.TimeOfDay;
    }

    private void SetTimeFromField()
    {
        if (_timeOfFinOperation.HasValue)
        {
            _itemToUpdate.DateTime = new DateTime(
                _itemToUpdate.DateTime.Value.Year,
                _itemToUpdate.DateTime.Value.Month,
                _itemToUpdate.DateTime.Value.Day,
                _timeOfFinOperation.Value.Hours,
                _timeOfFinOperation.Value.Minutes,
                _timeOfFinOperation.Value.Seconds
            );
        }
    }

    private void ClearSelectedItem()
    {
        _selectedItem = new();
        _itemToUpdate = new();
        _timeOfFinOperation = new();
        _selectedExpenseType = new List<ExpenseTypeDto>();
    }

    private bool FilterFunc1(FinancialOperationDto element) => FilterFunc(element, searchString);

    private bool FilterFunc(FinancialOperationDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Amount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (_expenseTypes.FirstOrDefault(x => x.Id == element.TypeId).Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OnRowClickHandler(TableRowClickEventArgs<FinancialOperationDto> args)
    {
        _selectedItem = args.Item;
        UpdateEditedData();
    }

    private async Task RefreshFinancialoperationsList()
    {
        _financialOperations = await FinancialOperationDtoService.GetFinancialOperationsArrayFromApi();
        Snackbar.Add("List was refreshed", Severity.Info);
    }

    private async Task RefreshExpenseTypesList()
    {
        _expenseTypes = await ExpensetypeDtoService.GetExpenseTypesArrayFromApi();
    }

    private void SetValuesFromNonBindedFields()
    {
        _itemToUpdate.TypeId = _selectedExpenseType.FirstOrDefault().Id;
    }

    private async Task UpdateRecord()
    { 
        SetTimeFromField();
        SetValuesFromNonBindedFields();
        await FinancialOperationDtoService.UpdateFinancialOperation(_itemToUpdate);
        await RefreshFinancialoperationsList();
    }

    private async Task DeleteRecord()
    {
        await FinancialOperationDtoService.DeleteFinancialOperation(_selectedItem);
        ClearSelectedItem();
        await RefreshFinancialoperationsList();
    }

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshFinancialoperationsList();
        await this.RefreshExpenseTypesList();
    }
}
