@page "/exptypesmanaging"
@using System.Text.Json.Serialization
@using System.Text.Json
@using System.Net.Http.Json
@using System.Text
@using SelfFinanceCommon.Dtos;
@using SelfFinanceCommon.Dtos.ForCreate;
@using Services.Interfaces;
@inject ISnackbar Snackbar
@inject IExpenseTypeService ExpenseTypeDtoService
@inject ICommonService CommonService
@inject IDialogService DialogService

<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Refresh" @onclick="RefreshList" Color="Color.Inherit" Class="mr-5" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Href="/exptypecreating" Color="Color.Inherit" />
        <MudIconButton Icon="@Icons.Material.Outlined.Edit" @onclick="UpdateRecord"/>
        <MudIconButton Icon="@Icons.Material.Outlined.Remove" @onclick="DeleteRecord"/>
    </MudToolBar>
</MudPaper>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="8">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudTable T="ExpenseTypeDto" Items="@_expenseTypes"Hover="true" Filter="new Func<ExpenseTypeDto,bool>(FilterFunc1)" 
                    @bind-SelectedItem="_selectedItem" OnRowClick="@OnRowClickHandler">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Expense Types</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ExpenseTypeDto,object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel  SortBy="new Func<ExpenseTypeDto, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<ExpenseTypeDto, object>(x=>x.IsIncome)">Is income</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Is income">@context.IsIncome</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                    </PagerContent>
                </MudTable>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudForm>
                    <MudNumericField T="int" Label="Id" ReadOnly="true" @bind-Value="_itemToUpdate.Id"/>
                    <MudTextField T="string" Label="Name" @bind-Value="_itemToUpdate.Name"/>
                    <MudSwitch T="bool" Label="IsIncome" @bind-Checked="_itemToUpdate.IsIncome" Color="Color.Success" UnCheckedColor="Color.Error"/>
                </MudForm>
            </MudPaper>
        </MudItem>      
    </MudGrid>
</MudContainer>


@code {
    private string _searchString = "";
    private ExpenseTypeDto _selectedItem1 = null;
    private HashSet<ExpenseTypeDto> _selectedItems = new HashSet<ExpenseTypeDto>();
    private ExpenseTypeDto _selectedItem = new();
    private ExpenseTypeDto _itemToUpdate = new();
    private IEnumerable<ExpenseTypeDto> _expenseTypes = new List<ExpenseTypeDto>();

    private void UpdateEditedData()
    {
        _itemToUpdate.Id = _selectedItem.Id;
        _itemToUpdate.Name = _selectedItem.Name;
        _itemToUpdate.IsIncome = _selectedItem.IsIncome;
    }

    private void ClearSelectedItem()
    {
        _selectedItem = new();
        _itemToUpdate = new();
    }

    private bool FilterFunc1(ExpenseTypeDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(ExpenseTypeDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OnRowClickHandler(TableRowClickEventArgs<ExpenseTypeDto> args)
    {
        _selectedItem = args.Item;
        UpdateEditedData();
    }


    private async Task RefreshList()
    {
        _expenseTypes = await ExpenseTypeDtoService.GetExpenseTypesArrayFromApi();
        Snackbar.Add("List was refreshed", Severity.Info);
    }

    private async Task UpdateRecord()
    {
        await ExpenseTypeDtoService.UpdateExpenseType(_itemToUpdate);
        await RefreshList();
    }

    private async Task DeleteRecord()
    {
        await ExpenseTypeDtoService.DeleteExpenseType(_selectedItem);
        ClearSelectedItem();
        await RefreshList();
    }

    protected override async Task OnInitializedAsync()
    {
        await this.RefreshList();
    }
}
